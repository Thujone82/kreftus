name: Deploy to iFastNet via Git Push (with Passphrase via Expect)

on:
  push:
    branches:
      - main  # Or whatever branch you want to deploy from

jobs:
  push-to-ifastnet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history so we can push correctly

      - name: Install expect
        run: sudo apt-get update && sudo apt-get install -y expect

- name: Setup SSH Agent and Add Key with Passphrase
        env:
          SSH_PRIVATE_KEY_CONTENT: ${{ secrets.IFASTNET }}
          SSH_KEY_PASSPHRASE: ${{ secrets.IFASTNET_PASS }}
        run: |
          echo "Starting ssh-agent..."
          eval "$(ssh-agent -s)"

          SSH_DIR="$HOME/.ssh"
          KEY_FILE_PATH="$SSH_DIR/ifastnet_action_key"

          echo "Creating private key file at $KEY_FILE_PATH..."
          mkdir -p "$SSH_DIR"
          echo "$SSH_PRIVATE_KEY_CONTENT" > "$KEY_FILE_PATH"
          chmod 600 "$KEY_FILE_PATH"

          if [ ! -f "$KEY_FILE_PATH" ]; then
            echo "ERROR: Private key file was not created at $KEY_FILE_PATH"
            exit 1
          fi
          echo "Private key file created successfully."
          
          # Optional: Output first few lines of the key for format verification (BE CAREFUL - this might expose parts of the key in logs)
          # echo "First few lines of the key file:"
          # head -n 3 "$KEY_FILE_PATH"
          # echo "Last few lines of the key file:"
          # tail -n 3 "$KEY_FILE_PATH"

          echo "Attempting to add key to ssh-agent with expect..."
          # Ensure SSH_KEY_PASSPHRASE is not empty if it's expected
          if [ -z "$SSH_KEY_PASSPHRASE" ]; then
            echo "Error: SSH_KEY_PASSPHRASE environment variable is empty."
            # Decide if this should be a fatal error if passphrase is truly required
            # exit 1 
          fi

          EXPECT_SCRIPT=$(cat <<EOF
          set timeout 10
          spawn ssh-add "$KEY_FILE_PATH"
          expect {
            "Enter passphrase for $KEY_FILE_PATH:" {
              send "$SSH_KEY_PASSPHRASE\r"
              # After sending passphrase, wait for ssh-add to either succeed or ask again (bad passphrase)
              expect {
                "Bad passphrase, try again for $KEY_FILE_PATH:" {
                  puts "Error: Bad passphrase provided to ssh-add."
                  exit 1
                }
                eof {
                  # ssh-add finished, hopefully successfully
                  puts "ssh-add finished after passphrase."
                }
                timeout {
                  puts "Timeout after sending passphrase."
                  exit 1
                }
              }
            }
            "Identity added: $KEY_FILE_PATH" {
               # This means the key was added, possibly it had no passphrase or agent remembered it
               puts "Identity added (potentially no passphrase was needed or agent handled it)."
            }
            eof {
              # ssh-add finished without asking for a passphrase (e.g. key is not encrypted or already in agent)
              # This is less likely if we expect a passphrase prompt
              puts "ssh-add finished without passphrase prompt (is key unencrypted or already added?)."
            }
            timeout {
              puts "Timeout waiting for initial passphrase prompt or eof."
              exit 1
            }
          }
          EOF
          )

          echo "$EXPECT_SCRIPT" | expect -d # Run expect with debug output

          echo "Verifying if key was added to agent..."
          ssh-add -l
          if [ $? -ne 0 ]; then
            echo "ssh-add -l reported an error or no identities. Key not added successfully."
            # Optionally, try to cat the key again here if debugging permissions or content
            # echo "Content of key file that failed to load:"
            # cat "$KEY_FILE_PATH" # SENSITIVE - REMOVE AFTER DEBUGGING
            exit 1
          else
            echo "Key successfully added to agent."
          fi
      - name: Create known_hosts file
        env:
          KNOWN_HOSTS_CONTENT: ${{ secrets.IFASTNET_KNOWN_HOSTS }}
        run: |
          SSH_DIR="$HOME/.ssh"
          mkdir -p "$SSH_DIR"
          echo "$KNOWN_HOSTS_CONTENT" > "$SSH_DIR/known_hosts"
          chmod 600 "$SSH_DIR/known_hosts"

      - name: Configure Git User
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Add iFastNet as a remote
        run: |
          git remote remove ifastnet || true # Avoid error if remote already exists
          git remote add ifastnet ssh://kreftus@kreft.us:27015/home/kreftus/gitcode

      - name: Push to iFastNet
        run: |
          echo "Attempting to push to iFastNet..."
          git push ifastnet main --force
          echo "Push command executed."
